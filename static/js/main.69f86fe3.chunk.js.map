{"version":3,"sources":["store/actions.ts","store/index.tsx","components/DatePicker/style.tsx","components/DatePicker/Date/style.tsx","components/DatePicker/Date/index.tsx","components/DatePicker/Controls/style.tsx","components/DatePicker/Controls/index.tsx","components/DatePicker/index.tsx","index.tsx"],"names":["actions","dateChanged","createAction","dateClicked","initialState","date","startOfMonth","Date","startDate","undefined","endDate","store","createStore","state","action","produce","draft","type","getType","payload","isAfter","composeWithDevTools","useTypedSelector","useSelector","Wrapper","styled","div","DayWrapper","attrs","props","isSelected","isWithinRange","isDate","DateText","p","differentMonth","isHeading","heading","dispatch","useDispatch","sameMonth","isSameMonth","isSameDay","isBefore","onClick","format","TransparentButton","button","Controls","subMonths","addMonths","DatePicker","currentPageDate","padding","getDay","paddingDays","daysInMonth","getDaysInMonth","futureDays","prevDays","Array","fill","map","_","i","subDays","endOfMonth","days","addDays","nextDays","day","index","key","rootElement","document","getElementById","render","className"],"mappings":"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","file":"static/js/main.69f86fe3.chunk.js","sourcesContent":["import { ActionType, createAction } from \"typesafe-actions\";\n\nconst dateChanged = createAction(\"date changed\")<Date>();\nconst dateClicked = createAction(\"date clicked\")<Date>();\n\nexport const actions = {\n  dateChanged,\n  dateClicked\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { startOfMonth, isAfter } from \"date-fns\";\n\nconst initialState = () => ({\n  date: startOfMonth(new Date()),\n  startDate: undefined as undefined | Date,\n  endDate: undefined as undefined | Date\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case getType(actions.dateChanged):\n        draft.date = action.payload;\n        break;\n      case getType(actions.dateClicked):\n        if (draft.startDate && draft.endDate) {\n          draft.startDate = action.payload;\n          draft.endDate = undefined;\n        } else if (draft.startDate) {\n          if (draft.startDate === action.payload) {\n            draft.startDate = undefined;\n          } else {\n            if (isAfter(action.payload, draft.startDate)) {\n              draft.endDate = action.payload;\n            } else {\n              draft.endDate = draft.startDate;\n              draft.startDate = action.payload;\n            }\n          }\n        } else {\n          draft.startDate = action.payload;\n        }\n        break;\n    }\n  });\n\nexport const store = createStore(rootReducer, composeWithDevTools());\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  width: 200px;\n  font-family: Arial, Helvetica, sans-serif;\n  border: 1px solid #e1e1e1;\n  padding: 10px;\n`;\nexport const DayWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(7, 1fr);\n  grid-column-gap: 0px;\n  grid-row-gap: 0px;\n  font-size: 0.7em;\n`;\n","import styled from \"styled-components\";\n\ntype WrapperProps = {\n  isSelected: boolean;\n  isWithinRange: boolean;\n  isDate: boolean;\n};\n\nexport const Wrapper = styled.div.attrs((props: WrapperProps) => ({}))<\n  WrapperProps\n>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background: ${props =>\n    props.isSelected ? \"#1B1B1B\" : props.isWithinRange ? \"#EBEBEB\" : undefined};\n  color: ${props => (props.isSelected ? \"#fff\" : \"#000\")};\n  opacity: ${props => (props.isSelected ? 1 : undefined)};\n  :hover {\n    background: ${props =>\n      !props.isSelected && props.isDate ? \"#1B1B1B\" : undefined};\n    color: ${props => (!props.isSelected && props.isDate ? \"#fff\" : undefined)};\n  }\n`;\n\ntype DateTextProps = {\n  differentMonth: boolean;\n  isHeading: boolean;\n};\n\nexport const DateText = styled.p.attrs((props: DateTextProps) => ({}))<\n  DateTextProps\n>`\n  opacity: ${props => (props.differentMonth && !props.isHeading ? 0.5 : 1)};\n  font-weight: ${props => (props.isHeading ? 600 : 0)};\n`;\n","import React from \"react\";\nimport { Wrapper, DateText } from \"./style\";\nimport { format, isSameMonth, isBefore, isAfter, isSameDay } from \"date-fns\";\nimport { useTypedSelector } from \"../../../store\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../../store/actions\";\n\nexport const Date: React.FC<{\n  heading?: string;\n  date?: Date;\n}> = ({ heading, date }) => {\n  const dispatch = useDispatch();\n  const sameMonth = useTypedSelector(state =>\n    date && isSameMonth(date, state.date) ? true : false\n  );\n\n  const isSelected = useTypedSelector(state =>\n    date &&\n    ((state.startDate && isSameDay(date, state.startDate)) ||\n      (state.endDate && isSameDay(date, state.endDate)))\n      ? true\n      : false\n  );\n\n  const isWithinRange = useTypedSelector(state =>\n    date &&\n    state.endDate &&\n    state.startDate &&\n    isBefore(date, state.endDate) &&\n    isAfter(date, state.startDate)\n      ? true\n      : false\n  );\n\n  return (\n    <Wrapper\n      isDate={date ? true : false}\n      isWithinRange={isWithinRange}\n      isSelected={isSelected}\n      onClick={() => (date ? dispatch(actions.dateClicked(date)) : void {})}\n    >\n      <DateText isHeading={heading ? true : false} differentMonth={!sameMonth}>\n        {heading ? heading : date ? format(date, \"d\") : undefined}\n      </DateText>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0 0 10px 0;\n  align-items: center;\n\n  h4 {\n    margin: 0;\n    padding: 0 20px;\n    font-size: 0.8em;\n  }\n`;\n\nexport const TransparentButton = styled.button`\n  background: transparent;\n  cursor: pointer;\n  border: none;\n  opacity: 0.3;\n  transition: 0.3s;\n  :hover {\n    opacity: 1;\n  }\n`;\n","import React from \"react\";\nimport { Wrapper, TransparentButton } from \"./style\";\nimport { format, subMonths, addMonths } from \"date-fns\";\nimport { useTypedSelector } from \"../../../store\";\nimport { actions } from \"../../../store/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\n\nexport const Controls = () => {\n  const dispatch = useDispatch();\n  const date = useTypedSelector(state => state.date);\n  return (\n    <Wrapper>\n      <TransparentButton\n        onClick={() => dispatch(actions.dateChanged(subMonths(date, 1)))}\n      >\n        <FaCaretLeft />\n      </TransparentButton>\n      <h4>{format(date, \"MMMM yyyy\")}</h4>\n      <TransparentButton\n        onClick={() => dispatch(actions.dateChanged(addMonths(date, 1)))}\n      >\n        <FaCaretRight />\n      </TransparentButton>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport {\n  getDaysInMonth,\n  startOfMonth,\n  getDay,\n  addDays,\n  addMonths,\n  subMonths,\n  endOfMonth,\n  subDays\n} from \"date-fns\";\nimport { Wrapper, DayWrapper } from \"./style\";\nimport { Date } from \"./Date\";\nimport { Controls } from \"./Controls\";\n\nexport const DatePicker: React.FC<{\n  currentPageDate: Date;\n}> = ({ currentPageDate }) => {\n  const dayHeadings = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n  const padding = getDay(startOfMonth(currentPageDate));\n  const paddingDays = padding > 0 ? padding - 1 : padding;\n  const daysInMonth = getDaysInMonth(currentPageDate);\n  const futureDays = 42 - paddingDays - daysInMonth;\n\n  const prevDays = Array(paddingDays)\n    .fill(0)\n    .map((_, i) =>\n      subDays(endOfMonth(subMonths(currentPageDate, 1)), paddingDays - i - 1)\n    );\n\n  const days = Array(daysInMonth)\n    .fill(1)\n    .map((_, i) => addDays(startOfMonth(currentPageDate), i));\n\n  const nextDays = Array(futureDays > 0 ? futureDays : 0)\n    .fill(0)\n    .map((_, i) => addDays(startOfMonth(addMonths(currentPageDate, 1)), i));\n\n  return (\n    <Wrapper>\n      <Controls />\n      <DayWrapper>\n        {dayHeadings.map((day, index) => (\n          <Date key={index} heading={day} />\n        ))}\n        {prevDays.map(day => (\n          <Date date={day} />\n        ))}\n        {days.map(day => (\n          <Date date={day} />\n        ))}\n        {nextDays.map(day => (\n          <Date date={day} />\n        ))}\n      </DayWrapper>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store, useTypedSelector } from \"./store\";\nimport { DatePicker } from \"./components/DatePicker\";\n\nfunction App() {\n  const date = useTypedSelector(state => state.date);\n  return (\n    <div className=\"App\">\n      <DatePicker currentPageDate={date} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}